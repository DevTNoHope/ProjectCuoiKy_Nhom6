from fastapi import APIRouter, Depends, HTTPException, status, Query
from datetime import datetime, date, time, timezone
from sqlalchemy.orm import Session
from sqlalchemy import and_, text   # ‚¨ÖÔ∏è th√™m text
import json                         # ‚¨ÖÔ∏è th√™m json
from app.core.deps import get_db
from app.core.auth_deps import admin_required, get_current_user
from app.models.booking import Booking, BookingService
from app.models.stylist import Stylist
from app.models.user import User, UserRole
from app.schemas.booking import BookingOut, BookingCreate, BookingUpdate, BookingStatus
# ==== TH√äM IMPORT CHO TH√îNG B√ÅO ====
from app.models.shop import Shop
from app.models.device import Device
from app.core.onesignal import onesignal

router = APIRouter(prefix="/bookings", tags=["bookings"])

def _to_utc(dt: datetime) -> datetime:
    # nh·∫≠n t·ª´ Pydantic: c√≥ th·ªÉ tz-aware (c√≥ Z) ho·∫∑c naive
    if dt.tzinfo is None:
        return dt.replace(tzinfo=timezone.utc)  # coi naive l√† UTC
    return dt.astimezone(timezone.utc)
# 1. Danh s√°ch to√†n b·ªô booking (Admin)
@router.get("", response_model=list[BookingOut], dependencies=[Depends(admin_required)])
def list_bookings(db: Session = Depends(get_db)):
    return db.query(Booking).order_by(Booking.id.desc()).all()

# 2a. L·∫•y booking c·ªßa ch√≠nh m√¨nh (JWT)
@router.get("/me", response_model=list[BookingOut])
def list_my_bookings(
    db: Session = Depends(get_db),
    me: User = Depends(get_current_user),
):
    return (
        db.query(Booking)
        .filter(Booking.user_id == me.id)
        .order_by(Booking.start_dt.desc())
        .all()
    )

# (Gi·ªØ nguy√™n) 2b. L·∫•y booking theo user_id (n·∫øu b·∫°n v·∫´n mu·ªën API n√†y cho admin/CSKH)
@router.get("/user/{user_id}", response_model=list[BookingOut], dependencies=[Depends(admin_required)])
def list_user_bookings(user_id: int, db: Session = Depends(get_db)):
    return (
        db.query(Booking)
        .filter(Booking.user_id == user_id)
        .order_by(Booking.start_dt.desc())
        .all()
    )

# 3. T·∫°o m·ªõi booking (User) - l·∫•y user t·ª´ JWT
@router.post("", response_model=BookingOut, status_code=status.HTTP_201_CREATED)
def create_booking(
    payload: BookingCreate,
    db: Session = Depends(get_db),
    me: User = Depends(get_current_user),
):
    # Ki·ªÉm tra stylist t·ªìn t·∫°i (n·∫øu c√≥ ch·ªçn)
    if payload.stylist_id:
        stylist = db.query(Stylist).filter(Stylist.id == payload.stylist_id).first()
        if not stylist:
            raise HTTPException(status_code=404, detail="Stylist not found")

        # Ki·ªÉm tra tr√πng l·ªãch stylist
        conflict = (
            db.query(Booking)
            .filter(
                and_(
                    Booking.stylist_id == payload.stylist_id,
                    Booking.status.in_([BookingStatus.pending, BookingStatus.approved]),
                    Booking.start_dt < payload.end_dt,
                    Booking.end_dt > payload.start_dt,
                )
            )
            .first()
        )
        if conflict:
            raise HTTPException(
                status_code=400,
                detail="Stylist already has a booking in this time range",
            )

    # (Tu·ª≥ ch·ªçn) b·∫°n c√≥ th·ªÉ t·ª± t√≠nh total_price t·ª´ services n·∫øu mu·ªën ‚Äúserver-authoritative‚Äù
    # total_calc = sum(s.price for s in payload.services)
    # if total_calc != payload.total_price:
    #     raise HTTPException(status_code=400, detail="total_price mismatch")
    start_utc = _to_utc(payload.start_dt)
    end_utc   = _to_utc(payload.end_dt)

    # T·∫°o booking m·ªõi (user_id l·∫•y t·ª´ JWT)
    booking = Booking(
        user_id=me.id,
        shop_id=payload.shop_id,
        stylist_id=payload.stylist_id,
        start_dt=start_utc,
        end_dt=end_utc,
        total_price=payload.total_price,
        note=payload.note,
    )

    db.add(booking)
    db.flush()  # l·∫•y booking.id tr∆∞·ªõc khi th√™m services

    # Th√™m c√°c d·ªãch v·ª•
    for s in payload.services:
        db.add(
            BookingService(
                booking_id=booking.id,
                service_id=s.service_id,
                price=s.price,
                duration_min=s.duration_min,
            )
        )

    db.commit()
    db.refresh(booking)
   # ============================================================
    # üîî G·ª¨I TH√îNG B√ÅO CHO USER (KH√ÅCH H√ÄNG)
    # ============================================================
    # ƒë·∫∑t m·∫∑c ƒë·ªãnh ƒë·ªÉ tr√°nh l·ªói bi·∫øn ch∆∞a g√°n n·∫øu query shop l·ªói
    shop_name = "C·ª≠a h√†ng"
    shop_address = ""

   # l·∫•y th√¥ng tin c·ª≠a h√†ng (kh√¥ng ƒë·ªÉ l·ªói ·∫£nh h∆∞·ªüng flow)
    try:
        shop = db.query(Shop).filter(Shop.id == payload.shop_id).first()
        if shop:
            if getattr(shop, "name", None):
                shop_name = shop.name
            if getattr(shop, "address", None):
                shop_address = shop.address or ""
    except Exception as _:
        pass

    try:
        # L·∫•y danh s√°ch OneSignal Player ID c·ªßa user hi·ªán t·∫°i
        player_ids = [
            d.onesignal_player_id
            for d in db.query(Device).filter(Device.user_id == me.id).all()
            if d.onesignal_player_id
        ]

        # G·ª≠i th√¥ng b√°o OneSignal cho User
        if player_ids:
            when_str = booking.start_dt.astimezone(timezone.utc).strftime('%H:%M %d/%m/%Y')
            onesignal.send_to_players(
                player_ids=player_ids,
                title_vi="ƒê·∫∑t l·ªãch th√†nh c√¥ng üéâ",
                body_vi=f"{when_str} t·∫°i {shop_name} - {shop_address}",
                data={"bookingId": str(booking.id), "screen": "BookingDetail"},
            )
    except Exception as e:
        # kh√¥ng l√†m h·ªèng flow n·∫øu push l·ªói
        print(f"L·ªói g·ª≠i th√¥ng b√°o OneSignal (user): {e}")

    # ============================================================
    # üîî G·ª¨I TH√îNG B√ÅO CHO ADMIN (khi c√≥ booking m·ªõi)
    # ============================================================
    try:
        # L·∫•y t·∫•t c·∫£ thi·∫øt b·ªã c·ªßa t√†i kho·∫£n c√≥ role = Admin
        admin_devices = (
            db.query(Device)
            .join(User, User.id == Device.user_id)
            .filter(User.role == UserRole.Admin)
            .all()
        )
        admin_player_ids = [
            d.onesignal_player_id for d in admin_devices if d.onesignal_player_id
        ]

        if admin_player_ids:
            title = "ƒê·∫∑t l·ªãch h·∫πn m·ªõi"
            when_str = booking.start_dt.astimezone(timezone.utc).strftime('%H:%M %d/%m/%Y')
            content = f"Kh√°ch {me.full_name or 'Kh√°ch h√†ng'} ƒë·∫∑t l·ªãch t·∫°i {shop_name} l√∫c {when_str}"

            onesignal.send_to_players(
                player_ids=admin_player_ids,
                title_vi=title,
                body_vi=content,
                data={"bookingId": str(booking.id), "screen": "AdminBookingList"},
            )
    except Exception as e:
        print(f"L·ªói g·ª≠i th√¥ng b√°o OneSignal (admin): {e}")
 # (D) M·ª§C 5 ‚Äî GHI LOG TH√îNG B√ÅO V√ÄO DB (raw SQL, kh√¥ng c·∫ßn model)
    try:
        # Log cho User (ng∆∞·ªùi ƒë·∫∑t l·ªãch)
        user_title = "ƒê·∫∑t l·ªãch th√†nh c√¥ng üéâ"
        user_when  = booking.start_dt.astimezone(timezone.utc).strftime('%H:%M %d/%m/%Y')
        user_body  = f"{user_when} t·∫°i {shop_name} - {shop_address}"
        user_data  = json.dumps({"bookingId": booking.id, "screen": "BookingDetail"})
        db.execute(
            text("""
                INSERT INTO notifications (user_id, title, body, data_json)
                VALUES (:user_id, :title, :body, :data_json)
            """),
            {"user_id": me.id, "title": user_title, "body": user_body, "data_json": user_data}
        )

        # Log cho t·∫•t c·∫£ Admin
        admin_user_ids = [
            uid for (uid,) in
            db.query(User.id).filter(User.role == UserRole.Admin).all()
        ]
        if admin_user_ids:
            admin_title = "ƒê·∫∑t l·ªãch h·∫πn m·ªõi"
            admin_when  = booking.start_dt.astimezone(timezone.utc).strftime('%H:%M %d/%m/%Y')
            admin_body  = f"Kh√°ch {me.full_name or 'Kh√°ch h√†ng'} ƒë·∫∑t l·ªãch t·∫°i {shop_name} l√∫c {admin_when}"
            admin_data  = json.dumps({"bookingId": booking.id, "screen": "AdminBookingList"})
            for admin_id in admin_user_ids:
                db.execute(
                    text("""
                        INSERT INTO notifications (user_id, title, body, data_json)
                        VALUES (:user_id, :title, :body, :data_json)
                    """),
                    {"user_id": admin_id, "title": admin_title, "body": admin_body, "data_json": admin_data}
                )

        db.commit()
    except Exception as e:
        # Kh√¥ng ph√° flow n·∫øu log l·ªói
        print(f"L·ªói ghi log notifications: {e}")
    # ============================================================
    return booking

# 4. C·∫≠p nh·∫≠t booking (duy·ªát / h·ªßy / ƒë·ªïi l·ªãch)
@router.put("/{booking_id}", response_model=BookingOut)
def update_booking(booking_id: int, payload: BookingUpdate, db: Session = Depends(get_db)):
    booking = db.query(Booking).filter(Booking.id == booking_id).first()
    if not booking:
        raise HTTPException(status_code=404, detail="Booking not found")

    # N·∫øu ƒë·ªïi l·ªãch ‚Üí ki·ªÉm tra tr√πng gi·ªù stylist (n·∫øu booking c√≥ stylist)
    if payload.start_dt and booking.stylist_id:
        conflict = (
            db.query(Booking)
            .filter(
                and_(
                    Booking.stylist_id == booking.stylist_id,
                    Booking.id != booking_id,
                    Booking.status.in_([BookingStatus.pending, BookingStatus.approved]),
                    Booking.start_dt < (payload.end_dt or booking.end_dt),
                    Booking.end_dt > payload.start_dt,
                )
            )
            .first()
        )
        if conflict:
            raise HTTPException(
                status_code=400,
                detail="Stylist already booked in this new time range",
            )

    # C·∫≠p nh·∫≠t tr∆∞·ªùng cho ph√©p
    for key, value in payload.model_dump(exclude_unset=True).items():
        setattr(booking, key, value)

    db.commit()
    db.refresh(booking)
    return booking

# 5. Xo√° booking (Admin)
@router.delete("/{booking_id}", dependencies=[Depends(admin_required)])
def delete_booking(booking_id: int, db: Session = Depends(get_db)):
    booking = db.query(Booking).filter(Booking.id == booking_id).first()
    if not booking:
        raise HTTPException(status_code=404, detail="Booking not found")
    db.delete(booking)
    db.commit()
    return {"message": "Deleted successfully"}
@router.get("/stylist/{stylist_id}", response_model=list[BookingOut])
def get_stylist_bookings_by_day(
    stylist_id: int,
    day: date = Query(..., alias="date"),   # nh·∫≠n 'date=YYYY-MM-DD'
    db: Session = Depends(get_db),
    me=Depends(get_current_user),           # ch·ªâ c·∫ßn user ƒëƒÉng nh·∫≠p
):
    # kho·∫£ng th·ªùi gian trong ng√†y theo UTC
    start = datetime.combine(day, time.min).replace(tzinfo=timezone.utc)
    end   = datetime.combine(day, time.max).replace(tzinfo=timezone.utc)

    return (
        db.query(Booking)
        .filter(
            and_(
                Booking.stylist_id == stylist_id,
                Booking.status.in_([BookingStatus.pending, BookingStatus.approved]),
                Booking.start_dt < end,
                Booking.end_dt > start,
            )
        )
        .order_by(Booking.start_dt.asc())
        .all()
    )